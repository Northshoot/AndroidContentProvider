{##          _______  _______  _______  _______  _#}
{## |\     /|(  ___  )(  ____ )(       )(  ___  )( (    /||\     /|#}
{## | )   ( || (   ) || (    )|| () () || (   ) ||  \  ( |( \   / )#}
{## | (___) || (___) || (____)|| || || || |   | ||   \ | | \ (_) /#}
{## |  ___  ||  ___  ||     __)| |(_)| || |   | || (\ \) |  \   /#}
{## | (   ) || (   ) || (\ (   | |   | || |   | || | \   |   ) (#}
{## | )   ( || )   ( || ) \ \__| )   ( || (___) || )  \  |   | |#}
{## |/     \||/     \||/   \__/|/     \|(_______)|/    )_)   \_/#}
{###}
{% extends "base_model.tmpl" %}

{% block main %}
import java.util.Date;

import android.database.Cursor;
{% if data.config.useAnnotations %}
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
{% endif %}

import {{data.config.providerJavaPackage}}.base.AbstractCursor;
{% for joined_model in data.model.joined_models %}
import {{data.config.PROVIDER_JAVA_PACKAGE}}.{{joined_model.package_name}}.*;
{% endfor %}

/**
 * Cursor wrapper for the {@code {{data.model.name_lower_case}} table.
 */
public class {{data.model.name_camel_case}}Cursor extends AbstractCursor
implements
{{data.model.name_camel_case}}Model {
    public {{data.model.name_camel_case}}Cursor(Cursor cursor) {
        super(cursor);
    }
{% for field in data.model.fields_including_joins %}
    {% if field.is_id and field.name_lower_case != '_id' %}
    @Override
    public long getId() {
        return getLongOrNull({{field.model.name_camel_case}}Columns._ID);
    }
    {% endif %}

    /**
    {% if field.documentation  %}
     * {{field.documentation}}
    {%  else %}
     * Get the {@code {{field.name_lower_case}} value.
    {% endif %}
    {% if field.is_nullable  %}
     * Can be {@code null}.
     {% elif not field.type.has_not_nullable_java_type %}
     * Cannot be {@code null}.
     {% endif %}

     */
    {% if data.config.useAnnotations %}
        {% if field.is_nullable  %}
    @Nullable
        {% elif not field.type.has_not_nullable_java_type %}
    @NonNull
        {% endif %}
    {% endif %}

    public {{field.simple_java_name}} get{% if field.is_foreign_key  %}{{field.path}}{% endif %}{{field.name_camel_case}}() {
        {%  if field.mType != "ENUM"%}
        String res = {{ field.function_cursor_get_or_null }}({{field.model
        .name_camel_case}}Columns.{{field.name_upper_case}});
        {%  if not field.is_nullable  %}
        if (res == null)
            throw new NullPointerException("The value of '{{field.name_lower_case}}' in the database was null, which is not allowed according to the model definition");
        {% endif %}
        return res;

         {% else %}
        Integer intValue = getIntegerOrNull({{field.model
        .name_camel_case}}Columns.${field.name_upper_case}});
            {%  if not field.is_nullable  %}
        if (intValue == null) return null;
            {% else %}
        if (intValue == null)
            throw new NullPointerException("The value of '${field.nameLowerCase}' in the database was null, which is not allowed according to the model definition");
        {%  endif %}
        return {{field.simple_java_name}}.values()[intValue];

        {% endif %}

    }
{% endfor %}
}
{% endblock %}
