{##          _______  _______  _______  _______  _#}
{## |\     /|(  ___  )(  ____ )(       )(  ___  )( (    /||\     /|#}
{## | )   ( || (   ) || (    )|| () () || (   ) ||  \  ( |( \   / )#}
{## | (___) || (___) || (____)|| || || || |   | ||   \ | | \ (_) /#}
{## |  ___  ||  ___  ||     __)| |(_)| || |   | || (\ \) |  \   /#}
{## | (   ) || (   ) || (\ (   | |   | || |   | || | \   |   ) (#}
{## | )   ( || )   ( || ) \ \__| )   ( || (___) || )  \  |   | |#}
{## |/     \||/     \||/   \__/|/     \|(_______)|/    )_)   \_/#}
{###}
{% extends "base_model.tmpl" %}

{% block main %}
import java.util.Date;

import android.content.Context;
import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;

import {{data.config.PROVIDER_JAVA_PACKAGE}}.base.AbstractSelection;
{% for joined_model in data.model.joined_models %}
import {{data.config.PROVIDER_JAVA_PACKAGE}}.{{joined_model.package_name}}.*;
{% endfor %}

/**
 * Selection for the {@code {{data.model.name_lover_case}} table.
 */
public class {{data.model.name_camel_case}}Selection extends AbstractSelection<{{data.model.name_camel_case}}Selection %} {
    @Override
    protected Uri baseUri() {
        return {{data.model.name_camel_case}}Columns.CONTENT_URI;
    }

    /**
     * Query the given content resolver using this selection.
     *
     * @param contentResolver The content resolver to query.
     * @param projection A list of which columns to return. Passing null will return all columns, which is inefficient.
     * @return A {@code {{data.model.name_camel_case}}Cursor} object, which is positioned before the first entry, or null.
     */
    public {{data.model.name_camel_case}}Cursor query(ContentResolver contentResolver, String[] projection) {
        Cursor cursor = contentResolver.query(uri(), projection, sel(), args(), order());
        if (cursor == null) return null;
        return new {{data.model.name_camel_case}}Cursor(cursor);
    }

    /**
     * Equivalent of calling {@code query(contentResolver, null)}.
     */
    public {{data.model.name_camel_case}}Cursor query(ContentResolver contentResolver) {
        return query(contentResolver, null);
    }

    /**
     * Query the given content resolver using this selection.
     *
     * @param context The context to use for the query.
     * @param projection A list of which columns to return. Passing null will return all columns, which is inefficient.
     * @return A {@code {{data.model.name_camel_case}}Cursor} object, which is positioned before the first entry, or null.
     */
    public {{data.model.name_camel_case}}Cursor query(Context context, String[] projection) {
        Cursor cursor = context.getContentResolver().query(uri(), projection, sel(), args(), order());
        if (cursor == null) return null;
        return new {{data.model.name_camel_case}}Cursor(cursor);
    }

    /**
     * Equivalent of calling {@code query(context, null)}.
     */
    public {{data.model.name_camel_case}}Cursor query(Context context) {
        return query(context, null);
    }


    public {{data.model.name_camel_case}}Selection id(long... value) {
        addEquals("{{data.model.name_lover_case}}." + {{data.model.name_camel_case}}Columns._ID, toObjectArray(value));
        return this;
    }

    public {{data.model.name_camel_case}}Selection idNot(long... value) {
        addNotEquals("{{data.model.name_lover_case}}." + {{data.model.name_camel_case}}Columns._ID, toObjectArray(value));
        return this;
    }

    public {{data.model.name_camel_case}}Selection orderById(boolean desc) {
        orderBy("{{data.model.name_lover_case}}." + {{data.model.name_camel_case}}Columns._ID, desc);
        return this;
    }

    public {{data.model.name_camel_case}}Selection orderById() {
        return orderById(false);
    }
    {% for field in data.model.getFieldsIncludingJoins() %}
        {% if field.name_lower_case != "_id"  %}

            {% if filed.type == "BOOLEAN" %}

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}
                    {{field.path_uncap_first}}{{field
                    .name_camel_case}}{% else %}{{field
                    .name_camel_case_lower_case}}{% endif %}({{field
                    .simple_java_name}} value) {
        addEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, toObjectArray(value));
        return this;
    }
            {% else %}

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}({{field.simple_java_name}}... value) {
        addEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, {% if field.isConvertionNeeded %}toObjectArray(value){% else %}value{% endif %});
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Not({{field.simple_java_name}}... value) {
        addNotEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, {% if field.isConvertionNeeded %}toObjectArray(value){% else %}value{% endif %});
        return this;
    }

            {%  endif %}

            {% if filed.type == "DATE" %}
    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}({% if field.isNullable %}Long{% else %}long{% endif %}... value) {
        addEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, {% if field.isNullable %}value{% else %}toObjectArray(value){% endif %});
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}After(Date value) {
        addGreaterThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}AfterEq(Date value) {
        addGreaterThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Before(Date value) {
        addLessThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}BeforeEq(Date value) {
        addLessThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }
            {% elif filed.type =="INTEGER" %}
    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Gt(int value) {
        addGreaterThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}GtEq(int value) {
        addGreaterThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Lt(int value) {
        addLessThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}LtEq(int value) {
        addLessThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }
            {% elif filed.type == "LONG" %}
    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Gt(long value) {
        addGreaterThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}GtEq(long value) {
        addGreaterThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Lt(long value) {
        addLessThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}LtEq(long value) {
        addLessThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }
            {% elif filed.type == "FLOAT" %}
    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Gt(float value) {
        addGreaterThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}GtEq(float value) {
        addGreaterThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Lt(float value) {
        addLessThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}LtEq(float value) {
        addLessThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }
            {% elif filed.type == "DOUBLE" %}
    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Gt(double value) {
        addGreaterThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}GtEq(double value) {
        addGreaterThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Lt(double value) {
        addLessThan({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}LtEq(double value) {
        addLessThanOrEquals({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }
            {% elif filed.type == "STRING" %}
    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Like(String... value) {
        addLike({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}Contains(String... value) {
        addContains({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}StartsWith(String... value) {
        addStartsWith({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }

    public {{data.model.name_camel_case}}Selection {% if field.is_foreign_key %}{{field.path_uncap_first}}{{field.name_camel_case}}{% else %}{{field.name_camel_case_lowe_case}}{% endif %}EndsWith(String... value) {
        addEndsWith({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, value);
        return this;
    }
            {% endif %}


    public {{data.model.name_camel_case}}Selection orderBy{% if field
    .is_foreign_key %}{{field.path}}{{field.name_camel_case}}{% else %}{{field.name_camel_case}}{% endif %}(boolean desc) {
        orderBy({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, desc);
        return this;
    }

    public {{data.model.name_camel_case}}Selection orderBy{% if field
    .is_foreign_key %}{{field.path}}{{field.name_camel_case}}{% else %}{{field.name_camel_case}}{% endif %}() {
        orderBy({{field.data.model.name_camel_case}}Columns.{{field.name_upper_case}}, false);
        return this;
    }


        {% endif %}
    {% endfor %}
}
{%  endblock %}
