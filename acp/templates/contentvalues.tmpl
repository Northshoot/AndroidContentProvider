{##          _______  _______  _______  _______  _#}
{## |\     /|(  ___  )(  ____ )(       )(  ___  )( (    /||\     /|#}
{## | )   ( || (   ) || (    )|| () () || (   ) ||  \  ( |( \   / )#}
{## | (___) || (___) || (____)|| || || || |   | ||   \ | | \ (_) /#}
{## |  ___  ||  ___  ||     __)| |(_)| || |   | || (\ \) |  \   /#}
{## | (   ) || (   ) || (\ (   | |   | || |   | || | \   |   ) (#}
{## | )   ( || )   ( || ) \ \__| )   ( || (___) || )  \  |   | |#}
{## |/     \||/     \||/   \__/|/     \|(_______)|/    )_)   \_/#}
{###}
{% extends "base_model.tmpl" %}

{% block main %}
import java.util.Date;

import android.content.Context;
import android.content.ContentResolver;
import android.net.Uri;
{% if data.config.useAnnotations %}
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
{% endif %}

import {{data.config.PROVIDER_JAVA_PACKAGE}}.base.AbstractContentValues;

/**
 * Content values wrapper for the {@code {{data.model.name_lower_case}} table.
 */
public class {{data.model.name_camel_case}}ContentValues extends
        AbstractContentValues {
    @Override
    public Uri uri() {
        return {{data.model.name_camel_case}}Columns.CONTENT_URI;
    }

    /**
     * Update row(s) using the values stored by this object and the given selection.
     *
     * @param contentResolver The content resolver to use.
     * @param where The selection to use (can be {@code null}).
     */
    public int update(ContentResolver contentResolver, {% if data.config.useAnnotations %}@Nullable{% endif %} {{data.model.name_camel_case}}Selection where) {
        return contentResolver.update(uri(), values(), where == null ? null : where.sel(), where == null ? null : where.args());
    }

    /**
     * Update row(s) using the values stored by this object and the given selection.
     *
     * @param contentResolver The content resolver to use.
     * @param where The selection to use (can be {@code null}).
     */
    public int update(Context context, {% if data.config.useAnnotations %}@Nullable{% endif %} {{data.model.name_camel_case}}Selection where) {
        return context.getContentResolver().update(uri(), values(), where == null ? null : where.sel(), where == null ? null : where.args());
    }
    {% for field in data.model.fields %}
        {% if field.name_lower_case != "_id"  %}

    /**
            {% if field.documentation  %}
     * {{field.documentation}}
            {% endif %}
            {%  if data.config.USE_ANNOTATIONS and not field.is_nullable and not field.has_not_nullable_java_type %}
    public {{data.mode.name_camel_case}}ContentValues put{{field.name_camel_case}}
                (@NonNull {{field.simple_java_name}} value) {
            {% elif data.config.USE_ANNOTATIONS and field.is_nullable  %}
    public {{data.model.name_camel_case}}ContentValues put{{field.name_camel_case}}
        (@Nullable {{field.simple_java_name}} value) {
            {% else %}
    public {{data.model.name_camel_case}}ContentValues put{{field
    .name_camel_case}}
        ({{field.simple_java_name}} value) {
            {% endif %}

                  {% if not field.isNullable and not field.has_not_nullable_java_type %}
        if (value == null) throw new IllegalArgumentException("{{field.name_camel_lower_case}} must not be null");
            {% endif %}
            {% if field.type == "DATE" %}

        mContentValues.put({{model.name_camel_case}}Columns.{{field
        .name_upper_case}}, {% if field.is_nullable %}value == null ? null :
            {% endif %}value.getTime());
            {% elif field.type == "ENUM" %}
        mContentValues.put({{data.model.nameCamelCase}}Columns.{{field
        .name_upper_case}}, {% if field.isNullable %}value == null ? null : {%
                    endif %}value.ordinal());
            {% else %}
        mContentValues.put({{data.model.name_camel_case}}Columns.{{field
        .name_upper_case}}, value);
            {% endif %}
        return this;
    }

            {% if field.isNullable %}
    public {{data.model.name_camel_case}}ContentValues put{{field
                .name_camel_case}}Null() {
        mContentValues.putNull({{model.name_camel_case}}Columns.{{field
        .name_upper_case}});
        return this;
    }
            {% endif %}
            {% if field.type == "DATE" %}

    public {{data.model.name_camel_case}}ContentValues put${{field.name_camel_case}}({% if field.isNullable %}{% if data.config.useAnnotations %}@Nullable {% endif %}Long {% else %}long{% endif %} value) {
        mContentValues.put({{data.model.name_camel_case}}Columns.{{field
        .name_upper_case}}, value);
        return this;
    }

            {% endif %}
        {% endif %}
    {% endfor %}
}
{% endblock %}
